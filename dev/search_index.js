var documenterSearchIndex = {"docs":
[{"location":"#BasicLU.jl","page":"Home","title":"BasicLU.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [BasicLU]","category":"page"},{"location":"#BasicLU.BLU","page":"Home","title":"BasicLU.BLU","text":"mutable struct BLU\n\nHold BASICLU object. You can access @xstore to set parameters and get output values from BASICLU routines.\n\n\n\n\n\n","category":"type"},{"location":"#BasicLU.get_factors-Tuple{BLU}","page":"Home","title":"BasicLU.get_factors","text":"get_factors(this)\n\nExport LU factors after fresh factorization.\n\nExample\n\nm = 100\nB = spdiagm(-1 => ones(m-1), 0 => 4*ones(m), 1 => ones(m-1))\nthis = BasicLU.initialize(m)\nBasicLU.factorize(this, B)\n(L,U,p,q) = BasicLU.get_factors(this)\nnorm(L*U-B[p,q], Inf)\n1.1102230246251565e-16\n\n\n\n\n\n","category":"method"},{"location":"#BasicLU.initialize-Tuple{Int64}","page":"Home","title":"BasicLU.initialize","text":"initialize(m)\n\nReturn a new BASICLU object for matrices of dimension m.\n\n\n\n\n\n","category":"method"},{"location":"#BasicLU.maxvolume_basis-Tuple{SparseArrays.SparseMatrixCSC{Float64, Int64}}","page":"Home","title":"BasicLU.maxvolume_basis","text":"basis, obj = maxvolume_basis(A::spmatrix)\n\nReturns a set of column indices for the matrix AI = [A sparse(I, m, m)] such\nthat AI[:,basis] is nonsingular and the number of slack columns in the basis\nis minimum (this is the row rank deficiency of A).\n\n\n\n\n\n","category":"method"},{"location":"#BasicLU.solve-Tuple{BLU, Vector{Float64}, Char}","page":"Home","title":"BasicLU.solve","text":"solve(this, rhs, trans)\n\nSolve linear system with factorized matrix.\n\n@rhs must be a dense or sparse vector. The solution is returned sparse when @rhs is sparse and dense otherwise.\n\n@trans must be 't' or 'T' for transposed solve, and any other character for forward solve.\n\n\n\n\n\n","category":"method"},{"location":"#BasicLU.solve4update","page":"Home","title":"BasicLU.solve4update","text":"solve4update(this, rhs, getsolution=false)\n\nSolve linear system in preparation to update the factorization.\n\n@rhs must be a sparse vector or a column index. When @rhs is a vector, then it is the column to be inserted into the factorized matrix. When @rhs is an index, than it is the column of the factorized matrix to be replaced.\n\n@getsolution indicates if the solution is to be returned, or only the update is to be prepared.\n\n\n\n\n\n","category":"function"},{"location":"#BasicLU.update-Tuple{BLU, Float64}","page":"Home","title":"BasicLU.update","text":"update(this, xtbl)\n\nUpdate the factorization after a column modification. The column position and the new column must have been set in previous calls to @solve4update.\n\n@xtbl is the pivot element in the simplex tableau. Used only to compute the pivot error.\n\nReturn estimated error of the new pivot element.\n\n\n\n\n\n","category":"method"},{"location":"#LinearAlgebra.factorize-Tuple{BLU, SparseArrays.SparseMatrixCSC{Float64, Int64}}","page":"Home","title":"LinearAlgebra.factorize","text":"factorize(this, B)\n\nLoad sparse matrix into BASICLU object and factorize it. @B must be square and have the same dimension for which @this was initialized.\n\nReturn status code.\n\n\n\n\n\n","category":"method"}]
}
